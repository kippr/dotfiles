#!/bin/bash

# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>   add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%Cgreen(%ar)%Creset"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"

FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

show_git_head() {
    pretty_git_log -1
    git show -p --pretty="tformat:"
}

pretty_git_log() {
    bold=`tput smso`
    offbold=`tput rmso`
    git log --graph --pretty="tformat:${FORMAT}" $* |
        # Replace (2 years ago) with (2 years)
        sed -Ee 's/(^[^<]*) ago\)/\1)/' |
        # Replace (2 years, 5 months) with (2 years)
        sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        # convert two word names into abbrev - this could be nicer!
        sed 's/<\([A-Z]\)[a-z ]*\([A-Z]\)[A-Za-z \-]*>/<\1\2>/' |
        # Line columns up based on } delimiter
        column -s '}' -t |
        # highlight current location
        sed "s/\(([^)]*\)\(HEAD\)\([^)]*)\)/\1${bold}\2${offbold}\3/" |
        # Page only if we need to
        less -FXRS
}
rebase_unpushed() {
    num=$((`pretty_git_log | sed '/([^)]*origin[^)]*)/{q;}' | wc -l` - 1))
    if [ "$num" == "0" ] ; then echo "all pushed" && exit 1 ; fi
    git rebase -i HEAD~$num
}

checkout_selected_branch() {
    git branch --all --list | sed 's/^[ ]*remotes\///'|selecta|xargs git checkout
}

show_selected_revision() {
    #git log --all --pretty="tformat:%h}(%ar)}%d %s" | column -s '}' -t | selecta | cut -d ' ' -f 1 | xargs git show
    git log --all --pretty="tformat:%h}(%ar)}%d %s" |  selecta | cut -d ' ' -f 1 | xargs git show
}
